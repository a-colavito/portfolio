name: Translate and Deploy Hugo site to Pages

on:
  push:
    branches:
      - gh-pages # Il workflow si attiva su push alla branch gh-pages
  workflow_dispatch: # Permette di avviare il workflow manualmente

permissions:
  contents: write # Necessario per scrivere i file tradotti e per il checkout con il PAT
  pages: write # Necessario per il deploy a GitHub Pages
  id-token: write # Necessario per l'autenticazione OIDC con GitHub Pages

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest # Esegue il job su un runner Ubuntu
    env:
      HUGO_VERSION: 0.147.2
      HUGO_ENVIRONMENT: production
      TZ: Europe/Rome

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Clona il repository
        with:
          submodules: recursive # Include i sottomoduli
          fetch-depth: 0 # Clona tutta la cronologia (necessario per il commit)
          # Passa il Personal Access Token direttamente all'azione di checkout.
          # Questo configura correttamente le credenziali Git per i comandi successivi.
          token: ${{ secrets.GH_PAT }}

      - name: Setup Python
        uses: actions/setup-python@v4 # Configura l'ambiente Python
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install md-translate

      - name: Run translation script
        run: |
            md-translate content/it -F it -T en -P google --output content/en

      - name: Commit and push translated files
        # Poiché il token è stato passato a actions/checkout, le credenziali Git sono già impostate.
        # Non è più necessario `git remote set-url` con il token qui.
        run: |
          git config user.name "github-actions" # Configura il nome utente del commit
          git config user.email "github-actions@github.com" # Configura l'email del commit
          git add content/en/ # Aggiunge i file tradotti all'area di staging
          git commit -m "Add translated Markdown files [auto]" || echo "No changes to commit" # Effettua il commit se ci sono modifiche
          git push origin HEAD # Effettua il push alla branch corrente (gh-pages)

      - name: Install Hugo CLI
        run: |
          # Scarica e installa Hugo extended
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass # Installa Dart Sass per la compilazione CSS

      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true" # Installa dipendenze Node.js se presenti

      - name: Cache Restore
        id: cache-restore
        uses: actions/cache/restore@v4 # Ripristina la cache di Hugo
        with:
          path: |
            ${{ runner.temp }}/hugo_cache
          key: hugo-${{ github.run_id }}
          restore-keys: hugo-

      - name: Configure Git
        run: git config core.quotepath false # Configura Git per evitare problemi di encoding dei percorsi

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5 # Configura l'ambiente GitHub Pages

      - name: Build with Hugo
        run: |
          # Costruisce il sito Hugo
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/" \
            --cacheDir "${{ runner.temp }}/hugo_cache"

      - name: Cache Save
        id: cache-save
        uses: actions/cache/save@v4 # Salva la cache di Hugo
        with:
          path: |
            ${{ runner.temp }}/hugo_cache
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3 # Carica l'artefatto per il deploy su Pages
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Dipende dal job 'build'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Esegue il deploy a GitHub Pages
